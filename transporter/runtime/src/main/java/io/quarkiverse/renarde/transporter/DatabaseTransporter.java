package io.quarkiverse.renarde.transporter;

import java.io.IOException;
import java.io.StringWriter;
import java.io.UncheckedIOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.jboss.logging.Logger;

import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.module.SimpleModule;

import io.quarkus.arc.Arc;
import io.quarkus.hibernate.orm.panache.PanacheEntityBase;

public class DatabaseTransporter {

    private static Logger log = Logger.getLogger(DatabaseTransporter.class);

    // GENERATED
    //	static EntityTransporter entityTransporter = new EntityTransporter() {
    //
    //		@Override
    //		public void addDeserializers(SimpleModule module, InstanceResolver resolver) {
    //			module.addDeserializer(Speaker.class, new SpeakerDeserializer(resolver));
    //			module.addDeserializer(Talk.class, new TalkDeserializer(resolver));
    //		}
    //
    //		@Override
    //		public void addSerializers(SimpleModule module, ValueTransformer transformer) {
    //			module.addSerializer(Speaker.class, new SpeakerSerializer(transformer));
    //			module.addSerializer(Talk.class, new TalkSerializer(transformer));
    //		}
    //
    //		@Override
    //		public Class<? extends PanacheEntity> getEntityClass(String type) {
    //			switch(type) {
    //			case "model.Speaker": return Speaker.class;
    //			case "model.Talk": return Talk.class;
    //			}
    //			throw new RuntimeException("Don't know about entity class: "+type);
    //		}
    //
    //		@Override
    //		public PanacheEntity instantiate(String type) {
    //			switch(type) {
    //			case "model.Speaker": return new Speaker(); break;
    //			case "model.Talk": return new Talk(); break;
    //			case "model.Slot": return null; break;
    //			case "model.Track": return null; break;
    //			case "model.TalkTheme": return null; break;
    //			case "model.TalkType": return null; break;
    //			default: throw new RuntimeException("Don't know how to create instances of type "+type);
    //			}
    //		}
    //	};

    public static Map<Class<?>, List<? extends PanacheEntityBase>> importEntities(String json) {
        ObjectMapper mapper = new ObjectMapper();
        InstanceResolver resolver = new InstanceResolver();
        SimpleModule module = new SimpleModule();
        EntityTransporter entityTransporter = Arc.container().instance(EntityTransporter.class).get();
        entityTransporter.addDeserializers(module, resolver);
        mapper.registerModule(module);

        log.infof("Loading json: %s chars", json.length());
        Map<Class<?>, List<? extends PanacheEntityBase>> ret = new HashMap<>();

        try {
            JsonParser parser = mapper.createParser(json);

            assertt(parser.nextToken() == JsonToken.START_OBJECT);
            int count = 0;
            String fieldName;
            while ((fieldName = parser.nextFieldName()) != null) {
                Class<?> type = entityTransporter.getEntityClass(fieldName);
                List<PanacheEntityBase> entities = new ArrayList<>();
                ret.put(type, entities);
                log.infof("Reading type %s", fieldName);
                assertt(parser.nextToken() == JsonToken.START_ARRAY);
                while (parser.nextToken() != JsonToken.END_ARRAY) {
                    PanacheEntityBase readEntity = (PanacheEntityBase) parser.readValueAs(type);
                    log.infof("Read entity [%s] %s", count++, type);
                    entities.add(readEntity);
                }
            }
            return ret;
        } catch (IOException x) {
            throw new UncheckedIOException(x);
        }
    }

    // FIXME: add Class... version, but requires generated bytecode
    public static String export(@SuppressWarnings("unchecked") List<? extends PanacheEntityBase>... entities) {
        return export(ValueTransformer.IDENTITY_TRANSFORMER, entities);
    }

    public static String export(ValueTransformer transformer,
            @SuppressWarnings("unchecked") List<? extends PanacheEntityBase>... entities) {
        ObjectMapper mapper = new ObjectMapper();
        SimpleModule module = new SimpleModule();
        EntityTransporter entityTransporter = Arc.container().instance(EntityTransporter.class).get();
        entityTransporter.addSerializers(module, transformer);
        mapper.registerModule(module);
        StringWriter writer = new StringWriter();
        try {
            JsonGenerator generator = mapper.createGenerator(writer);
            log.info("Generating json");
            generator.writeStartObject();

            int written = 0;

            // ok this is weird
            for (List<? extends PanacheEntityBase> list : entities) {
                if (list.isEmpty())
                    continue;
                Class<? extends PanacheEntityBase> klass = list.get(0).getClass();
                generator.writeArrayFieldStart(klass.getName());
                for (PanacheEntityBase entity : list) {
                    generator.writeObject(entity);
                    written++;
                }
                generator.writeEndArray();
            }
            generator.writeEndObject();
            generator.close();

            log.infof("Wrote %s entries", written);
            return writer.toString();
        } catch (IOException x) {
            throw new UncheckedIOException(x);
        }
    }

    static void assertt(boolean condition) {
        if (!condition) {
            throw new RuntimeException("Assertion failed");
        }
    }

    public static Class<? extends PanacheEntityBase>[] sortedEntityTypes() {
        EntityTransporter entityTransporter = Arc.container().instance(EntityTransporter.class).get();
        return entityTransporter.sortedEntityTypes();
    }

    //	public static class SpeakerDeserializer extends JsonDeserializer<Speaker> {
    //
    //		private InstanceResolver resolver;
    //
    //		public SpeakerDeserializer(InstanceResolver resolver) {
    //			this.resolver = resolver;
    //		}
    //
    //		@Override
    //		public Speaker deserialize(JsonParser p, DeserializationContext ctxt) throws IOException, JacksonException {
    //			if(!p.isExpectedStartObjectToken()) {
    //				ctxt.reportMappingException("Expecting start of object");
    //				return null;
    //			}
    //			Long id = null;
    //			String firstName = null;
    //			String lastName = null;
    //			String biography = null;
    //			String blogURL = null;
    //			String company = null;
    //			String companyURL = null;
    //			String email = null;
    //			String importId = null;
    //			String phone = null;
    //			String title = null;
    //			String twitterAccount = null;
    //			boolean star = false;
    //			byte[] photo = null;
    //
    //			String fieldName;
    //			while((fieldName = p.nextFieldName()) != null) {
    //				switch(fieldName) {
    //				case "id": id = p.nextLongValue(0); break;
    //				case "firstName": firstName = p.nextTextValue(); break;
    //				case "lastName": lastName = p.nextTextValue(); break;
    //				case "biography": biography = p.nextTextValue(); break;
    //				case "blogURL": blogURL = p.nextTextValue(); break;
    //				case "company": company = p.nextTextValue(); break;
    //				case "companyURL": companyURL = p.nextTextValue(); break;
    //				case "email": email = p.nextTextValue(); break;
    //				case "importId": importId = p.nextTextValue(); break;
    //				case "phone": phone = p.nextTextValue(); break;
    //				case "title": title = p.nextTextValue(); break;
    //				case "twitterAccount": twitterAccount = p.nextTextValue(); break;
    //				case "star": star = p.nextBooleanValue(); break;
    //				case "photo": p.nextToken(); photo = p.getBinaryValue(); break;
    //				default:
    //					ctxt.reportMappingException("Not sure what to do with field: %s", fieldName);
    //					break;
    //				}
    //			}
    //			assertt(p.currentToken() == JsonToken.END_OBJECT);
    //			Speaker speaker = resolver.resolve("model.Speaker", id);
    //			speaker.id = id;
    //			speaker.firstName = firstName;
    //			speaker.lastName = lastName;
    //			speaker.biography = biography;
    //			speaker.blogURL = blogURL;
    //			speaker.company = company;
    //			speaker.companyURL = companyURL;
    //			speaker.email = email;
    //			speaker.importId = importId;
    //			speaker.phone = phone;
    //			speaker.title = title;
    //			speaker.twitterAccount = twitterAccount;
    //			speaker.star = star;
    //			speaker.photo = photo != null ? Panache.getSession().getLobHelper().createBlob(photo) : null;
    //			return speaker;
    //		}
    //	}
    //
    //	public static class SpeakerSerializer extends JsonSerializer<Speaker> {
    //
    //		@Override
    //		public void serialize(Speaker value, JsonGenerator gen, SerializerProvider serializers) throws IOException {
    //			if(value == null) {
    //				gen.writeNull();
    //				return;
    //			}
    //			gen.writeStartObject(value);
    //			gen.writeNumberField("id", value.id);
    //			gen.writeStringField("firstName", value.firstName);
    //			gen.writeStringField("lastName", value.lastName);
    //			gen.writeStringField("biography", value.biography);
    //			gen.writeStringField("blogURL", value.blogURL);
    //			gen.writeStringField("company", value.company);
    //			gen.writeStringField("companyURL", value.companyURL);
    //			gen.writeStringField("email", value.email);
    //			gen.writeStringField("phone", value.phone);
    //			gen.writeStringField("title", value.title);
    //			gen.writeStringField("twitterAccount", value.twitterAccount);
    //			gen.writeBooleanField("star", value.star);
    //			if(value.photo != null) {
    //				try {
    //					gen.writeBinaryField("photo", value.photo.getBytes(1, (int) value.photo.length()));
    //				} catch (SQLException e) {
    //					throw new RuntimeException(e);
    //				}
    //			}
    //			gen.writeStringField("importId", value.importId);
    //			gen.writeEndObject();
    //		}
    //	}
    //
    //	public static class TalkDeserializer extends JsonDeserializer<Talk> {
    //
    //		private InstanceResolver resolver;
    //
    //		public TalkDeserializer(InstanceResolver resolver) {
    //			this.resolver = resolver;
    //		}
    //
    //		@Override
    //		public Talk deserialize(JsonParser p, DeserializationContext ctxt) throws IOException, JacksonException {
    //			if(!p.isExpectedStartObjectToken())
    //				ctxt.reportMappingException("Expecting start of object");
    //			Long id = null;
    //			String descriptionEN = null;
    //			String descriptionFR = null;
    //			String importId = null;
    //			BreakType isBreak = null;
    //			boolean isHiddenInTalksPage = false;
    //			Language language = null;
    //			Level level = null;
    //			Integer nbLikes = null;
    //			List<Speaker> speakers = null;
    //			Slot slot = null;
    //			String slidesUrl = null;
    //			String titleEN = null;
    //			String titleFR = null;
    //			TalkTheme theme = null;
    //			Track track = null;
    //			TalkType type= null;
    //
    //			String fieldName;
    //			while((fieldName = p.nextFieldName()) != null) {
    //				switch(fieldName) {
    //				case "id": id = p.nextLongValue(0); break;
    //				case "descriptionEN": descriptionEN = p.nextTextValue(); break;
    //				case "descriptionFR": descriptionFR = p.nextTextValue(); break;
    //				case "importId": importId = p.nextTextValue(); break;
    //				case "isBreak": isBreak = BreakType.valueOf(p.nextTextValue()); break;
    //				case "isHiddenInTalksPage": isHiddenInTalksPage = p.nextBooleanValue(); break;
    //				case "language": language = Language.valueOf(p.nextTextValue()); break;
    //				case "level": level = Level.valueOf(p.nextTextValue()); break;
    //				case "nbLikes": nbLikes = p.nextIntValue(0); break;
    //				case "speakers":
    //					assertt(p.nextToken() == JsonToken.START_ARRAY);
    //					speakers = new ArrayList<>();
    //					while(p.nextToken() != JsonToken.END_ARRAY) {
    //						speakers.add(resolver.resolveReference(p, true));
    //					}
    //					break;
    //				case "slot": slot = resolver.resolveReference(p); break;
    //				case "slidesUrl": slidesUrl  = p.nextTextValue(); break;
    //				case "titleEN": titleEN = p.nextTextValue(); break;
    //				case "titleFR": titleFR = p.nextTextValue(); break;
    //				case "theme": theme = resolver.resolveReference(p); break;
    //				case "track": track = resolver.resolveReference(p); break;
    //				case "type": type = resolver.resolveReference(p); break;
    //				default:
    //					ctxt.reportMappingException("Not sure what to do with field: %s", fieldName);
    //					break;
    //				}
    //			}
    //			assertt(p.currentToken() == JsonToken.END_OBJECT);
    //			Talk talk = resolver.resolve("model.Talk", id);
    //			talk.id = id;
    //			talk.descriptionEN = descriptionEN;
    //			talk.descriptionFR = descriptionFR;
    //			talk.importId = importId;
    //			talk.isBreak = isBreak;
    //			talk.isHiddenInTalksPage = isHiddenInTalksPage;
    //			talk.language = language;
    //			talk.level = level;
    //			talk.nbLikes = nbLikes;
    //			talk.speakers = speakers;
    //			talk.slot = slot;
    //			talk.slidesUrl = slidesUrl;
    //			talk.titleEN = titleEN;
    //			talk.titleFR = titleFR;
    //			talk.theme = theme;
    //			talk.track = track;
    //			talk.type = type;
    //			return talk;
    //		}
    //	}
    //
    //	public static class TalkSerializer extends JsonSerializer<Talk>{
    //
    //		@Override
    //		public void serialize(Talk value, JsonGenerator gen, SerializerProvider serializers) throws IOException {
    //			if(value == null) {
    //				gen.writeNull();
    //				return;
    //			}
    //			gen.writeStartObject(value);
    //			gen.writeNumberField("id", value.id);
    //			gen.writeStringField("descriptionEN", value.descriptionEN);
    //			gen.writeStringField("descriptionFR", value.descriptionFR);
    //			gen.writeStringField("importId", value.importId);
    //			gen.writeStringField("isBreak", value.isBreak.name());
    //			gen.writeBooleanField("isHiddenInTalksPage", value.isHiddenInTalksPage);
    //			gen.writeStringField("language", value.language.name());
    //			gen.writeStringField("level", value.level.name());
    //			gen.writeNumberField("nbLikes", value.nbLikes);
    //			gen.writeArrayFieldStart("speakers");
    //			for (Speaker speaker : value.speakers) {
    //				writeObjectReference(speaker, gen);
    //			}
    //			gen.writeEndArray();
    //			writeObjectReference("slot", value.slot, gen);
    //			gen.writeStringField("slidesUrl", value.slidesUrl);
    //			gen.writeStringField("titleEN", value.titleEN);
    //			gen.writeStringField("titleFR", value.titleFR);
    //			writeObjectReference("theme", value.theme, gen);
    //			writeObjectReference("track", value.track, gen);
    //			writeObjectReference("type", value.type, gen);
    //			gen.writeEndObject();
    //		}
    //
    //	}

}
